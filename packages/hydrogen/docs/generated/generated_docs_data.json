[
  {
    "name": "createWithCache",
    "category": "components",
    "isVisualComponent": false,
    "related": [],
    "description": "Creates a utility function that executes an asynchronous operation \n like `fetch` and caches the result according to the strategy provided.\nUse this to call any third-party APIs from loaders or actions.\nBy default, it uses the `CacheShort` strategy.",
    "type": "component",
    "defaultExample": {
      "description": "I am the default example",
      "codeblock": {
        "tabs": [
          {
            "title": "JavaScript",
            "code": "// In your app's `server.ts` file:\nimport * as remixBuild from '@remix-run/dev/server-build';\nimport {createWithCache_unstable, CacheLong} from '@shopify/hydrogen';\n// Use another `createRequestHandler` if deploying off oxygen\nimport {createRequestHandler} from '@shopify/remix-oxygen';\n\nexport default {\n  async fetch(request, env, executionContext) {\n    /* ... */\n\n    const cache = await caches.open('my-cms');\n    const withCache = createWithCache_unstable({cache, waitUntil});\n\n    // Create custom utilities to query third-party APIs:\n    const fetchMyCMS = (query) => {\n      // Prefix the cache key and make it unique based on arguments.\n      return withCache(['my-cms', query], CacheLong(), async () => {\n        return await (\n          await fetch('my-cms.com/api', {\n            method: 'POST',\n            body: query,\n          })\n        ).json();\n      });\n    };\n\n    const handleRequest = createRequestHandler({\n      build: remixBuild,\n      mode: process.env.NODE_ENV,\n      getLoadContext: () => ({\n        /* ... */\n        fetchMyCMS,\n      }),\n    });\n\n    /* ... */\n  },\n};\n",
            "language": "js"
          },
          {
            "title": "TypeScript",
            "code": "// In your app's `server.ts` file:\nimport * as remixBuild from '@remix-run/dev/server-build';\nimport {createWithCache_unstable, CacheLong} from '@shopify/hydrogen';\n// Use another `createRequestHandler` if deploying off oxygen\nimport {createRequestHandler} from '@shopify/remix-oxygen';\n\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    executionContext: ExecutionContext,\n  ): Promise<Response> {\n    /* ... */\n\n    const cache = await caches.open('my-cms');\n    const withCache = createWithCache_unstable({cache, waitUntil});\n\n    // Create custom utilities to query third-party APIs:\n    const fetchMyCMS = (query: string) => {\n      // Prefix the cache key and make it unique based on arguments.\n      return withCache(['my-cms', query], CacheLong(), async () => {\n        return await (\n          await fetch('my-cms.com/api', {\n            method: 'POST',\n            body: query,\n          })\n        ).json();\n      });\n    };\n\n    const handleRequest = createRequestHandler({\n      build: remixBuild,\n      mode: process.env.NODE_ENV,\n      getLoadContext: () => ({\n        /* ... */\n        fetchMyCMS,\n      }),\n    });\n\n    /* ... */\n  },\n};\n",
            "language": "ts"
          }
        ],
        "title": "Example code"
      }
    },
    "definitions": [
      {
        "title": "Props",
        "description": "",
        "type": "WithCache",
        "typeDefinitions": {
          "WithCache": {
            "filePath": "/with-cache.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "WithCache",
            "value": "<T = unknown>(cacheKey: CacheKey, strategy: AllCacheOptions, actionFn: () => T | Promise<T>) => Promise<T>",
            "description": ""
          },
          "CacheKey": {
            "filePath": "/cache/fetch.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CacheKey",
            "value": "string | readonly unknown[]",
            "description": ""
          },
          "AllCacheOptions": {
            "filePath": "/cache/strategies.ts",
            "name": "AllCacheOptions",
            "description": "",
            "members": [
              {
                "filePath": "/cache/strategies.ts",
                "syntaxKind": "PropertySignature",
                "name": "mode",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/cache/strategies.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxAge",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/cache/strategies.ts",
                "syntaxKind": "PropertySignature",
                "name": "staleWhileRevalidate",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/cache/strategies.ts",
                "syntaxKind": "PropertySignature",
                "name": "sMaxAge",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/cache/strategies.ts",
                "syntaxKind": "PropertySignature",
                "name": "staleIfError",
                "value": "number",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface AllCacheOptions {\n  mode?: string;\n  maxAge?: number;\n  staleWhileRevalidate?: number;\n  sMaxAge?: number;\n  staleIfError?: number;\n}"
          }
        }
      }
    ]
  }
]